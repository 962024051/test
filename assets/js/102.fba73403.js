(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{454:function(t,a,e){"use strict";e.r(a);var s=e(42),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"函数和类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数和类"}},[t._v("#")]),t._v(" 函数和类")]),t._v(" "),e("h2",{attrs:{id:"function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[t._v("#")]),t._v(" function")]),t._v(" "),e("p",[t._v("函数表达式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function [name]([param1[, param2[, ..., paramN]]]) {\n   statements\n};\n\nfunction 函数名称(参数列表){\n函数体语句\n}\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("语法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("name")]),t._v(" "),e("td",[t._v("函数名称")])]),t._v(" "),e("tr",[e("td",[t._v("param")]),t._v(" "),e("td",[t._v("参数列表，一个函数至多拥有 255 个参数")])]),t._v(" "),e("tr",[e("td",[t._v("statements")]),t._v(" "),e("td",[t._v("函数体语句")])])])]),t._v(" "),e("h2",{attrs:{id:"class"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[t._v("#")]),t._v(" class")]),t._v(" "),e("p",[t._v("类表达式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class [className] [extends] {\n  // class body\n};\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("语法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("className")]),t._v(" "),e("td",[t._v("类名称")])]),t._v(" "),e("tr",[e("td",[t._v("extends")]),t._v(" "),e("td",[t._v("几曾表达式")])]),t._v(" "),e("tr",[e("td",[t._v("class body")]),t._v(" "),e("td",[t._v("类语句")])])])]),t._v(" "),e("h2",{attrs:{id:"function-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#function-2"}},[t._v("#")]),t._v(" function*")]),t._v(" "),e("p",[t._v("generator 函数表达式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function* [name]([param1[, param2[, ..., paramN]]]) {\n   statements\n};\n\nfunction 函数名称(参数列表){\n函数体语句\n}\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("语法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("name")]),t._v(" "),e("td",[t._v("函数名称")])]),t._v(" "),e("tr",[e("td",[t._v("param")]),t._v(" "),e("td",[t._v("参数列表，一个函数至多拥有 255 个参数")])]),t._v(" "),e("tr",[e("td",[t._v("statements")]),t._v(" "),e("td",[t._v("函数体语句")])])])]),t._v(" "),e("h2",{attrs:{id:"yield"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[t._v("#")]),t._v(" yield")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[rv] = yield [expression];\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("语法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("expression")]),t._v(" "),e("td",[t._v("通过迭代器协议从生成器函数返回的值。如果省略，则返回 undefined")])]),t._v(" "),e("tr",[e("td",[t._v("rv")]),t._v(" "),e("td",[t._v("返回传递给生成器的"),e("code",[t._v("next()")]),t._v("方法的可选值，以恢复其执行。")])])])]),t._v(" "),e("h2",{attrs:{id:"yield-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yield-2"}},[t._v("#")]),t._v(" yield*")]),t._v(" "),e("p",[t._v("委派给另外一个 generator 函数或可迭代的对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("yield* [[expression]];\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("语法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("expression")]),t._v(" "),e("td",[t._v("返回一个可迭代对象的表达式。")])])])]),t._v(" "),e("h2",{attrs:{id:"async-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-function"}},[t._v("#")]),t._v(" async function")]),t._v(" "),e("p",[t._v("异步函数表达式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("async function [name]([param1[, param2[, ..., paramN]]]) {\n   statements\n};\n\nfunction 函数名称(参数列表){\n函数体语句\n}\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("语法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("name")]),t._v(" "),e("td",[t._v("函数名称")])]),t._v(" "),e("tr",[e("td",[t._v("param")]),t._v(" "),e("td",[t._v("参数列表，一个函数至多拥有 255 个参数")])]),t._v(" "),e("tr",[e("td",[t._v("statements")]),t._v(" "),e("td",[t._v("函数体语句")])])])]),t._v(" "),e("h2",{attrs:{id:"await"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#await"}},[t._v("#")]),t._v(" await")]),t._v(" "),e("p",[t._v("暂停或恢复执行异步函数，并等待 promise 的 resolve/reject 回调")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[返回值] = await 表达式;\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("语法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("表达式")]),t._v(" "),e("td",[t._v("一个 Promise 对象或者任何要等待的值")])]),t._v(" "),e("tr",[e("td",[t._v("返回值")]),t._v(" "),e("td",[t._v("返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身")])])])]),t._v(" "),e("h2",{attrs:{id:"return"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[t._v("#")]),t._v(" return")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("return [[expression]]; \n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("语法")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("expression")]),t._v(" "),e("td",[t._v("表达式的值会被返回。如果忽略，则返回 "),e("code",[t._v("undefined")])])])])])])}),[],!1,null,null,null);a.default=v.exports}}]);