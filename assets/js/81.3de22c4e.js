(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{433:function(t,r,e){"use strict";e.r(r);var a=e(42),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[t._v("#")]),t._v(" JSON")]),t._v(" "),e("h2",{attrs:{id:"javascript-与-json-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-与-json-的区别"}},[t._v("#")]),t._v(" JavaScript 与 JSON 的区别")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("JavaScript类型")]),t._v(" "),e("th",[t._v("JSON 的不同点")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("对象和数组")]),t._v(" "),e("td",[t._v("属性名称必须是双引号括起来的字符串；"),e("br"),t._v("最后一个属性后不能有逗号。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("数值")]),t._v(" "),e("td",[t._v("禁止出现前导零（ JSON.stringify 方法自动忽略前导零，而在 JSON.parse 方法中将会抛出 SyntaxError）；如果有小数点, 则后面至少跟着一位数字。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("字符串")]),t._v(" "),e("td",[t._v("只有有限的一些字符可能会被转义；禁止某些控制字符； Unicode 行分隔符 （U+2028）和段分隔符 （U+2029）被允许 ; 字符串必须用双引号括起来。请参考下面的示例，可以看到 JSON.parse() 能够正常解析，但将其当作JavaScript解析时会抛出 SyntaxError 错误："),e("br"),t._v("let code = '\"\\u2028\\u2029\"';"),e("br"),t._v(" JSON.parse(code);  // 正常 "),e("br"),t._v("eval(code);  // 错误")])])])]),t._v(" "),e("h2",{attrs:{id:"json语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json语法"}},[t._v("#")]),t._v(" JSON语法")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v('JSON = null\n    or true or false\n    or JSONNumber\n    or JSONString\n    or JSONObject\n    or JSONArray\n\nJSONNumber = - PositiveNumber\n          or PositiveNumber\nPositiveNumber = DecimalNumber\n              or DecimalNumber . Digits\n              or DecimalNumber . Digits ExponentPart\n              or DecimalNumber ExponentPart\nDecimalNumber = 0\n             or OneToNine Digits\nExponentPart = e Exponent\n            or E Exponent\nExponent = Digits\n        or + Digits\n        or - Digits\nDigits = Digit\n      or Digits Digit\nDigit = 0 through 9\nOneToNine = 1 through 9\n\nJSONString = ""\n          or " StringCharacters "\nStringCharacters = StringCharacter\n                or StringCharacters StringCharacter\nStringCharacter = any character\n                  except " or \\ or U+0000 through U+001F\n               or EscapeSequence\nEscapeSequence = \\" or \\/ or \\\\ or \\b or \\f or \\n or \\r or \\t\n              or \\u HexDigit HexDigit HexDigit HexDigit\nHexDigit = 0 through 9\n        or A through F\n        or a through f\n\nJSONObject = { }\n          or { Members }\nMembers = JSONString : JSON\n       or Members , JSONString : JSON\n\nJSONArray = [ ]\n         or [ ArrayElements ]\nArrayElements = JSON\n             or ArrayElements , JSON\n')])])]),e("h2",{attrs:{id:"静态方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),e("h3",{attrs:{id:"json-parse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json-parse"}},[t._v("#")]),t._v(" JSON.parse()")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("JSON.parse(text[, reviver])\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("text")]),t._v(" "),e("td",[t._v("文本字符串")])]),t._v(" "),e("tr",[e("td",[t._v("reviver(可选)")]),t._v(" "),e("td",[t._v("转换器, 如果传入该参数(函数)，可以用来修改解析生成的原始值，"),e("br"),t._v("调用时机在 parse 函数返回之前")])]),t._v(" "),e("tr",[e("td",[t._v("返回值")]),t._v(" "),e("td",[t._v("Object 类型, 对应给定 JSON 文本的对象/值")])])])]),t._v(" "),e("h3",{attrs:{id:"json-stringify"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json-stringify"}},[t._v("#")]),t._v(" JSON.stringify()")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("JSON.stringify(value[, replacer [, space]])\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("value")]),t._v(" "),e("td",[t._v("Object 类型的值")])]),t._v(" "),e("tr",[e("td",[t._v("reviver(可选)")]),t._v(" "),e("td",[t._v("一个函数或者一个数组。"),e("br"),t._v("作为函数，它有两个参数，键（key）和值（value），它们都会被序列化")])]),t._v(" "),e("tr",[e("td",[t._v("space(可选)")]),t._v(" "),e("td",[t._v("控制结果字符串里面的间距。"),e("br"),t._v("如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；"),e("br"),t._v("如果是一个字符串，则每一级别会比上一级别多缩进该字符串（或该字符串的前10个字符）")])]),t._v(" "),e("tr",[e("td",[t._v("返回值")]),t._v(" "),e("td",[t._v("JSON字符串")])])])]),t._v(" "),e("p",[t._v("reviver参数")]),t._v(" "),e("ul",[e("li",[t._v("如果返回一个 Number, 转换成相应的字符串作为属性值被添加入 JSON 字符串。")]),t._v(" "),e("li",[t._v("如果返回一个 String, 该字符串作为属性值被添加入 JSON 字符串。")]),t._v(" "),e("li",[t._v('如果返回一个 Boolean, "true" 或者 "false" 作为属性值被添加入 JSON 字符串。')]),t._v(" "),e("li",[t._v("如果返回任何其他对象，该对象递归地序列化成 JSON 字符串，对每个属性调用 replacer 方法。除非该对象是一个函数，这种情况将不会被序列化成 JSON 字符串。")]),t._v(" "),e("li",[t._v("如果返回 undefined，该属性值不会在 JSON 字符串中输出。")])])])}),[],!1,null,null,null);r.default=n.exports}}]);