(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{452:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"控制流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制流程"}},[t._v("#")]),t._v(" 控制流程")]),t._v(" "),s("h2",{attrs:{id:"块语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#块语句"}},[t._v("#")]),t._v(" 块语句")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("块声明\n{ StatementList }\n标记块声明\nLabelIdentifier: { StatementList }\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("语法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("StatementList")]),t._v(" "),s("td",[t._v("块语句中分组的语句")])]),t._v(" "),s("tr",[s("td",[t._v("LabelIdentifier")]),t._v(" "),s("td",[t._v("用于视觉识别的可选label或break的目标")])])])]),t._v(" "),s("h2",{attrs:{id:"break"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#break"}},[t._v("#")]),t._v(" break")]),t._v(" "),s("p",[t._v("中止当前循环，switch语句或label 语句，并把程序控制流转到紧接着被中止语句后面的语句。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("break [label];\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("语法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("label")]),t._v(" "),s("td",[t._v("块语句中分组的语句")])])])]),t._v(" "),s("h2",{attrs:{id:"continue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#continue"}},[t._v("#")]),t._v(" continue")]),t._v(" "),s("p",[t._v("终止执行当前或标签循环的语句，直接执行下一个迭代循环。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("continue [ label ];\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("语法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("label")]),t._v(" "),s("td",[t._v("标识标号关联的语句")])])])]),t._v(" "),s("h2",{attrs:{id:"空语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空语句"}},[t._v("#")]),t._v(" 空语句")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(";\n")])])]),s("h2",{attrs:{id:"if-else"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-else"}},[t._v("#")]),t._v(" if...else")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if (condition)\n   statement1\n[else\n   statement2]\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("语法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("condition")]),t._v(" "),s("td",[t._v("值为真或假的表达式")])]),t._v(" "),s("tr",[s("td",[t._v("statement1")]),t._v(" "),s("td",[t._v("为真时执行的语句")])]),t._v(" "),s("tr",[s("td",[t._v("statement2")]),t._v(" "),s("td",[t._v("为假时执行的语句")])])])]),t._v(" "),s("h2",{attrs:{id:"switch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[t._v("#")]),t._v(" switch")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" value1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 expression 的结果与 value1 匹配时，执行此处语句")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" value2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 expression 的结果与 value2 匹配时，执行此处语句")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" valueN"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 expression 的结果与 valueN 匹配时，执行此处语句")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 expression 与上面的 value 值都不匹配，执行此处语句")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"throw"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#throw"}},[t._v("#")]),t._v(" throw")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("throw expression; \n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("语法")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("expression")]),t._v(" "),s("td",[t._v("要抛出的表达式。")])])])]),t._v(" "),s("h2",{attrs:{id:"try-catch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-catch"}},[t._v("#")]),t._v(" try...catch")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("try {\n需要被执行的语句。\n   try_statements\n}\n如果在try块里有异常被抛出时执行的语句。\n一个条件表达式。condition_1\n[catch (exception_var_1 if condition_1) { // non-standard\n用于保存关联catch子句的异常对象的标识符。\n   catch_statements_1\n}]\n...       \n[catch (exception_var_2) {\n   catch_statements_2\n}]\n[finally {\n在try语句块之后执行的语句块。无论是否有异常抛出或捕获这些语句都将执行。\n   finally_statements\n}]\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);